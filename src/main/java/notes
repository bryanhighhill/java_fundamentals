METHODS

public static int calculateSum( int number1, int number2) {

    int sum = number1 + number2;
    return sum;
}

    - declaration of method is called "Method Header"
    - public, protected, private: access modifier - who has access to method outside of class
        + public: anyone can access anywhere
    - static, final, abstract, synchronized: non-access modifier
    - int: return type. all methods must specify return type. if not returning anything, specify return type of void
    - calculateSum: name of method - typically in form of verb, with exception of returning boolean
    - int number1, int number2: parameter list. required even if no parameters. data that must be sent to method
    - method signature: name of method + parameter list (data type and order)
    - last line of method body must return value declared unless VOID


Overloaded methods
    - a class can have multiple methods with same name, but they must have unique parameter list

Variable Scope
    - variable is only accessible within scope that it is declared in

Local Variable Type Inference
    - when declaring a local variable, you can use var
    instead of boolean isWaterWet = true you could type var isWaterWet = true.
    - Must be a local variable - not global, and must be assigning applicable value

Objects
    - structures that contain data in the form of fields and methods
    - classes used to define makeup of object

Encapsulation
    - all data and behavior is contained within the object itself
    - expose behavior and restrict direct access to data

Constructors
    - structures within a class that are used to set the initial state of an object

Records
    - special type of java class that's great for simple objects "POJO" - plain old java object, fields, setters & getters
    - type record instead of class

        public record Account(
            int id,
            int customerId,
            String type,
            double balance) {} - if methods are needed, add in curly braces

            instantiating record:
            Account account = new Account(12345, 54321, "Checking", 2178.5);

            - no setters with records, cannot change data
            - double balance = account.balance(); //getter

Wrapper Classes
    - int number1 = 5;
    - Integer number2 = 5; //can use dot notation with this declaration

    -Primitive data types - wrapper class
        - int : Integer
        - double : Double
        - long : Long
        - float : Float
        - boolean :  Boolean
        - char : Char
        - byte : Byte

Arrays
    - can hold any type of data but all data in single array must be of same type
    int[] lottoTicket = new int[6] - integer array that can hold 6 elements
    int[] lottoTicket = {8, 14, 22, 38, 45, 56}; - declare by defining values
    - cannot change length once defined


Inheritance
    - one class inherits the members of another class
    - 2 parties involved: parent and child
        - parent - super class, parent class, base class
        - child - sub class, derived class, child class
    - inheritance relationship known as "is a" relationship
    - subclass is a specialized type of person

    - constructors in superclass are executed before constructors in subclass
    - explicit calls can be made to superclass constructor from subclass constructor using super() - if call is made, must be first line of constructor

    - overloading: multiple methods within same class with same name but different parameter list

- Chain of inheritance
    - a class can only explicitly inherit from one superclass
    - a superclass can also inherit from another class

    - when a subclass inherits from a superclass not everything is inherited
        - constructors are not inherited (technically not considered members of the class)
        - public and protected are inherited, but private are not
        - final methods can be inherited but not overridden

        - when overriding inherited method, it must be declared as strict or less strict. you will get errors if it is more strict

        - Sealed Classes - classes that restrict inheritance to specific classes
            public sealed class Shape permits Rectangle, Circle{}
            public class Rectangle extends Shape {}
            public class Circle extends Shape {}

            - children of sealed classes are required to declare themselves as sealed, non-sealed, or final
            public sealed class Shape permits Rectangle, Circle {}
            public sealed class Rectangle extends Shape permits Square {}

            public non-sealed class Circle extends Shape {}
            - any child class that extends circle is not obligated to declare as sealed, non-sealed, or final

            public final class Square extends Rectangle {}
            - no subclasses can be declared after Square

            SEALED
            -sealed class grant inheritance permission
            - permitted subclass must extend sealed class
            - permitted subclass must be sealed, non-sealed, or final




